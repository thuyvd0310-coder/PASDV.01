# python.py

import streamlit as st
import pandas as pd
import numpy as np
# S·ª≠a l·ªói: Import numpy_financial (npf) cho c√°c h√†m NPV/IRR
import numpy_financial as npf 
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App Th·∫©m ƒë·ªãnh Ph∆∞∆°ng √°n V·ªën Vay",
    layout="wide"
)

st.title("·ª®ng d·ª•ng Th·∫©m ƒë·ªãnh D·ª± √°n ƒê·∫ßu t∆∞ (DCF) üí∞")

# --- Kh·ªüi t·∫°o v√† C·∫•u h√¨nh Gemini Client (Global) ---
try:
    API_KEY = st.secrets.get("GEMINI_API_KEY")
    if API_KEY:
        GEMINI_CLIENT = genai.Client(api_key=API_KEY)
    else:
        # N·∫øu kh√¥ng c√≥ API Key trong secrets, thi·∫øt l·∫≠p l√† None ƒë·ªÉ b√°o l·ªói khi g·ªçi API
        GEMINI_CLIENT = None
except Exception:
    GEMINI_CLIENT = None

# --- H√†m g·ªçi API Gemini (Cho AI Insights v√† Chatbot) ---
def generate_ai_response(prompt_text):
    """G·ª≠i prompt ƒë·∫øn Gemini API v√† nh·∫≠n nh·∫≠n x√©t."""
    if GEMINI_CLIENT is None:
        return "L·ªói: Gemini API kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra API Key trong Streamlit Secrets."
    
    try:
        model_name = 'gemini-2.5-flash' 
        response = GEMINI_CLIENT.models.generate_content(
            model=model_name,
            contents=prompt_text
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- H√†m t√≠nh to√°n D√≤ng ti·ªÅn v√† Ch·ªâ s·ªë DCF ---
# S·ª≠ d·ª•ng npf.npv v√† npf.irr ƒë·ªÉ kh·∫Øc ph·ª•c l·ªói Attribute Error
@st.cache_data
def calculate_dcf(
    total_investment, 
    n_years, 
    wacc, 
    annual_revenue, 
    annual_cost, 
    tax_rate
):
    """T√≠nh to√°n FCF, NPV v√† IRR."""
    
    # Gi·∫£ ƒë·ªãnh ƒë∆°n gi·∫£n: Kh√¥ng t√≠nh Kh·∫•u hao (ƒë√£ l∆∞·ª£c b·ªè trong ƒë·ªÅ b√†i g·ªëc)
    EBIT = annual_revenue - annual_cost
    TAX = EBIT * tax_rate
    EAT = EBIT - TAX
    
    # FCF (D√≤ng ti·ªÅn T·ª± do) = EAT (gi·∫£ ƒë·ªãnh)
    FCF_yearly = EAT
    
    # T·∫°o D√≤ng ti·ªÅn: ƒê·∫ßu t∆∞ ban ƒë·∫ßu (√¢m) + D√≤ng ti·ªÅn d∆∞∆°ng qua c√°c nƒÉm
    cash_flows = [-total_investment] + [FCF_yearly] * n_years
    
    # T√≠nh NPV (Gi√° tr·ªã Hi·ªán t·∫°i Thu·∫ßn)
    NPV = npf.npv(wacc, cash_flows) 
    
    # T√≠nh IRR (T·ª∑ su·∫•t Sinh l·ªùi N·ªôi t·∫°i)
    IRR = npf.irr(cash_flows) 
    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p IRR kh√¥ng t·ªìn t·∫°i (NaN)
    if np.isnan(IRR) or np.isinf(IRR):
        IRR = 0.0

    return FCF_yearly, NPV, IRR, cash_flows

# --- C·∫•u h√¨nh ·ª®ng d·ª•ng theo Module ---

# ----------------------------------------------------
# MODULE 1: NH·∫¨P LI·ªÜU D·ª∞ √ÅN
# ----------------------------------------------------
st.subheader("1. Nh·∫≠p Li·ªáu D·ª± √Ån v√† Th√¥ng s·ªë T√†i ch√≠nh")
with st.container(border=True):
    col1, col2, col3 = st.columns(3)
    
    # Input V·ªën
    TOTAL_INV = col1.number_input("T·ªïng V·ªën ƒê·∫ßu t∆∞ (t·ª∑ VNƒê)", value=30.0, min_value=1.0, step=1.0)
    INV_DEBT_RATIO = col2.slider("T·ª∑ l·ªá Vay V·ªën (%)", value=80, min_value=0, max_value=100) / 100
    LTV_TSBD = col3.number_input("Gi√° tr·ªã T√†i s·∫£n ƒê·∫£m b·∫£o (t·ª∑ VNƒê)", value=70.0, min_value=1.0, step=1.0)

    st.markdown("---")
    col4, col5 = st.columns(2)
    # Input T√†i ch√≠nh
    WACC = col4.number_input("WACC c·ªßa Doanh nghi·ªáp (%)", value=13.0, min_value=1.0, step=0.1) / 100
    TAX_RATE = col5.number_input("Thu·∫ø su·∫•t TNDN (%)", value=20.0, min_value=1.0, step=1.0) / 100
    
    # Input D√≤ng ti·ªÅn
    st.subheader("D·ª± ki·∫øn D√≤ng ti·ªÅn Ho·∫°t ƒë·ªông H√†ng nƒÉm")
    col6, col7, col8 = st.columns(3)
    ANNUAL_REV = col6.number_input("Doanh thu H√†ng nƒÉm (t·ª∑ VNƒê)", value=3.5, min_value=0.1, step=0.1)
    ANNUAL_COST = col7.number_input("Chi ph√≠ H√†ng nƒÉm (t·ª∑ VNƒê)", value=2.0, min_value=0.1, step=0.1)
    N_YEARS = col8.number_input("V√≤ng ƒë·ªùi D·ª± √°n (nƒÉm)", value=10, min_value=1, step=1)
    
    # T√≠nh to√°n c∆° b·∫£n
    VAY_VON = TOTAL_INV * INV_DEBT_RATIO
    VON_TU_CO = TOTAL_INV * (1 - INV_DEBT_RATIO)

# --- T√≠nh to√°n DCF v√† Hi·ªÉn th·ªã K·∫øt qu·∫£ ---
try:
    FCF, NPV, IRR, cash_flows_full = calculate_dcf(
        TOTAL_INV, N_YEARS, WACC, ANNUAL_REV, ANNUAL_COST, TAX_RATE
    )
    
    # ----------------------------------------------------
    # MODULE 2 & 3: K·∫æT QU·∫¢, CH·ªà S·ªê DCF V√Ä PH√ÇN T√çCH R·ª¶I RO
    # ----------------------------------------------------
    st.header("üìà 2. Hi·ªáu qu·∫£ T√†i ch√≠nh v√† Kh·∫£ nƒÉng Tr·∫£ n·ª£")
    
    # K·∫øt qu·∫£ ch√≠nh
    col_k1, col_k2, col_k3, col_k4 = st.columns(4)
    col_k1.metric("V·ªën Vay D·ª± ki·∫øn", f"{VAY_VON:,.0f} t·ª∑ VNƒê")
    col_k2.metric("L·ª£i nhu·∫≠n Sau Thu·∫ø/nƒÉm (FCF)", f"{FCF:,.2f} t·ª∑ VNƒê")
    col_k3.metric("NPV (Gi√° tr·ªã Hi·ªán t·∫°i Thu·∫ßn)", f"{NPV:,.2f} t·ª∑ VNƒê", delta="ƒê·∫°t (NPV > 0)" if NPV > 0 else "Kh√¥ng ƒë·∫°t (NPV <= 0)")
    col_k4.metric("IRR (T·ª∑ su·∫•t Sinh l·ªùi)", f"{IRR*100:,.2f}%", delta="> WACC" if IRR > WACC else "< WACC")
    
    st.markdown("---")

    # Ph√¢n t√≠ch ƒê·ªô nh·∫°y
    st.subheader("Ph√¢n t√≠ch ƒê·ªô nh·∫°y (K·ªãch b·∫£n X·∫•u nh·∫•t)")
    
    # K·ªãch b·∫£n X·∫•u nh·∫•t: Doanh thu gi·∫£m 15%, Chi ph√≠ tƒÉng 10%
    DT_WORST = ANNUAL_REV * 0.85
    CP_WORST = ANNUAL_COST * 1.10
    
    FCF_W, NPV_W, IRR_W, _ = calculate_dcf(
        TOTAL_INV, N_YEARS, WACC, DT_WORST, CP_WORST, TAX_RATE
    )
    
    col_r1, col_r2 = st.columns(2)
    col_r1.metric(
        "NPV (K·ªãch b·∫£n X·∫•u nh·∫•t)", 
        f"{NPV_W:,.2f} t·ª∑ VNƒê", 
        delta="V·∫´n d∆∞∆°ng (An to√†n)" if NPV_W > 0 else "ƒê√£ √¢m (R·ªßi ro cao)"
    )
    
    LTV_RATIO = (VAY_VON / LTV_TSBD) * 100
    col_r2.metric(
        "LTV (Cho vay/TSBƒê)", 
        f"{LTV_RATIO:,.2f}%", 
        delta="R·∫•t an to√†n" if LTV_RATIO < 50 else "C·∫ßn xem x√©t"
    )

    # ----------------------------------------------------
    # MODULE 4: AI INSIGHTS - NH·∫¨N ƒê·ªäNH CHUY√äN S√ÇU
    # ----------------------------------------------------
    st.header("üß† 3. AI Insights - Nh·∫≠n ƒë·ªãnh Chuy√™n s√¢u")
    
    if st.button("T·∫°o B√°o c√°o Th·∫©m ƒë·ªãnh AI (Click ƒë·ªÉ ph√¢n t√≠ch)", use_container_width=True):
        
        # T·∫°o prompt chi ti·∫øt d·ª±a tr√™n c√°c k·∫øt qu·∫£
        prompt_ai = f"""
        B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh t√†i ch√≠nh c·∫•p cao. H√£y ƒë∆∞a ra nh·∫≠n ƒë·ªãnh chuy√™n s√¢u (kho·∫£ng 4-5 ƒëo·∫°n) v·ªÅ ph∆∞∆°ng √°n ƒë·∫ßu t∆∞ d√¢y chuy·ªÅn b√°nh m√¨ n√†y. 
        T·∫≠p trung v√†o 3 kh√≠a c·∫°nh: Hi·ªáu qu·∫£ t√†i ch√≠nh, R·ªßi ro (ƒê·ªô nh·∫°y), v√† Kh·∫£ nƒÉng ƒë·∫£m b·∫£o n·ª£ cho ng√¢n h√†ng.

        D·ªØ li·ªáu ƒë·∫ßu v√†o:
        - T·ªïng V·ªën: {TOTAL_INV} t·ª∑ VNƒê | V·ªën Vay: {VAY_VON} t·ª∑ VNƒê | WACC: {WACC*100}% | Thu·∫ø: {TAX_RATE*100}% | TSBƒê: {LTV_TSBD} t·ª∑ VNƒê
        - FCF H√†ng nƒÉm: {FCF:.2f} t·ª∑ VNƒê | NPV C∆° s·ªü: {NPV:.2f} t·ª∑ VNƒê | IRR C∆° s·ªü: {IRR*100:.2f}%

        Ph√¢n t√≠ch r·ªßi ro (K·ªãch b·∫£n X·∫•u nh·∫•t - Doanh thu -15%, Chi ph√≠ +10%):
        - NPV K·ªãch b·∫£n X·∫•u nh·∫•t: {NPV_W:.2f} t·ª∑ VNƒê
        - LTV (Loan-to-Value): {LTV_RATIO:.2f}%

        H√£y ƒë√°nh gi√° m·ª©c ƒë·ªô ch·∫•p nh·∫≠n r·ªßi ro v√† ƒë∆∞a ra k·∫øt lu·∫≠n v·ªÅ vi·ªác c·∫•p v·ªën.
        """
        
        with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
            ai_result = generate_ai_response(prompt_ai)
            st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
            st.info(ai_result)

    # ----------------------------------------------------
    # MODULE 5: KHUNG H·ªéI - ƒê√ÅP CHUY√äN GIA
    # ----------------------------------------------------
    st.header("üí¨ 4. H·ªèi - ƒê√°p Chuy√™n gia v·ªõi Gemini")
    
    # 1. Kh·ªüi t·∫°o L·ªãch s·ª≠ H·ªôi tho·∫°i
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
        if GEMINI_CLIENT:
            st.session_state.chat_history.append({"role": "assistant", "content": "Xin ch√†o! T√¥i l√† chuy√™n gia th·∫©m ƒë·ªãnh AI. H√£y h·ªèi t√¥i v·ªÅ t√≠nh to√°n NPV, IRR, ho·∫∑c c√°c r·ªßi ro c·ªßa Ph∆∞∆°ng √°n s·ª≠ d·ª•ng v·ªën n√†y."})

    # Khung t·∫£i t·ªáp (Ch·ªâ ƒë·ªÉ b·ªï sung b·ªëi c·∫£nh)
    uploaded_file = st.file_uploader(
        "üìé T·∫£i th√™m t·ªáp (PDF/Excel) ƒë·ªÉ b·ªï sung b·ªëi c·∫£nh ph√¢n t√≠ch:", 
        type=["pdf", "xlsx", "csv"], 
        key="chat_file_uploader"
    )

    # 2. Hi·ªÉn th·ªã L·ªãch s·ª≠ H·ªôi tho·∫°i
    # ƒê·∫∑t trong container ƒë·ªÉ gi·ªØ v·ªã tr√≠ c·ªë ƒë·ªãnh
    chat_container = st.container(height=300, border=True)
    with chat_container:
        for message in st.session_state.chat_history:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

    # 3. X·ª≠ l√Ω ƒê·∫ßu v√†o (Input) c·ªßa ng∆∞·ªùi d√πng
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ d·ª± √°n n√†y..."):
        
        if GEMINI_CLIENT is None:
            st.error("L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o Chatbot do thi·∫øu Kh√≥a API.")
        else:
            # L∆∞u v√† hi·ªÉn th·ªã c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
            st.session_state.chat_history.append({"role": "user", "content": prompt})
            with chat_container: # S·ª≠ d·ª•ng container ƒë·ªÉ tin nh·∫Øn m·ªõi xu·∫•t hi·ªán
                with st.chat_message("user"):
                    st.markdown(prompt)

            # Chu·∫©n b·ªã b·ªëi c·∫£nh (contextual prompt)
            context = f"Context D·ª± √°n: T·ªïng V·ªën {TOTAL_INV} t·ª∑ VNƒê, NPV: {NPV:.2f} t·ª∑ VNƒê, IRR: {IRR*100:.2f}%. | "
            if uploaded_file is not None:
                context += f"Ng∆∞·ªùi d√πng ƒë√£ t·∫£i t·ªáp: {uploaded_file.name} ƒë·ªÉ tham kh·∫£o. Vui l√≤ng xem x√©t b·ªëi c·∫£nh n√†y."
            
            full_prompt = (
                f"B·∫°n l√† chuy√™n gia th·∫©m ƒë·ªãnh, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng, s·ª≠ d·ª•ng b·ªëi c·∫£nh d·ª± √°n sau ƒë√¢y:\n\n"
                f"{context}\n\n"
                f"L·ªãch s·ª≠ h·ªôi tho·∫°i (l∆∞·ª£c b·ªõt): {st.session_state.chat_history[-4:]}\n"
                f"C√¢u h·ªèi: {prompt}"
            )
            
            with st.spinner("Gemini ƒëang ph√¢n t√≠ch..."):
                ai_response = generate_ai_response(full_prompt)
            
            # L∆∞u v√† hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa AI
            with chat_container: # S·ª≠ d·ª•ng container ƒë·ªÉ tin nh·∫Øn m·ªõi xu·∫•t hi·ªán
                with st.chat_message("assistant"):
                    st.markdown(ai_response)
            st.session_state.chat_history.append({"role": "assistant", "content": ai_response})

except NameError:
    st.error("L·ªói: Vui l√≤ng ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã ƒë·∫ßu v√†o.")
except Exception as e:
    st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh t√≠nh to√°n: {e}")
